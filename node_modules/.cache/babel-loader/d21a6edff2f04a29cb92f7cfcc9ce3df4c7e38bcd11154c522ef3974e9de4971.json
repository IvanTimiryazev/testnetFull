{"ast":null,"code":"import { useSelector } from \"react-redux\";\nimport { accountsActions } from \"./accounts\";\nimport { notificationActions } from \"./notification\";\nexport const fetchAccountsData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const accountsList = await fetchData();\n      dispatch(accountsActions.replaceAccounts({\n        quantity: accountsList.length,\n        items: accountsList || []\n      }));\n    } catch (error) {\n      dispatch(notificationActions.showNotification({\n        status: \"error\",\n        message: \"Fetching accounts failed!\"\n      }));\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};\nexport const addAccount = async function (accountName) {\n  const sendRequest = async function () {\n    const response = await fetch(\"/api/v1/accounts\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        account: accountName\n      }),\n      headers: {\n        Authorization: `Bearer ${jwt}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Something went wrong ...\");\n    }\n    console.log(response);\n    fetchAccountsData();\n  };\n  try {\n    sendAccount();\n  } catch (err) {\n    console.log(err.message);\n  }\n  reset();\n};","map":{"version":3,"names":["useSelector","accountsActions","notificationActions","fetchAccountsData","dispatch","fetchData","response","fetch","method","headers","Authorization","localStorage","getItem","data","json","accountsList","replaceAccounts","quantity","length","items","error","showNotification","status","message","setTimeout","hideNotification","addAccount","accountName","sendRequest","body","JSON","stringify","account","jwt","ok","Error","console","log","sendAccount","err","reset"],"sources":["/Users/dmitrykoptev/Documents/GitHub/keysee/src/store/accounts-actions.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { accountsActions } from \"./accounts\";\nimport { notificationActions } from \"./notification\";\n\nexport const fetchAccountsData = () => {\n  return async (dispatch) => {\n    const fetchData = async () => {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const accountsList = await fetchData();\n      dispatch(\n        accountsActions.replaceAccounts({\n          quantity: accountsList.length,\n          items: accountsList || [],\n        })\n      );\n    } catch (error) {\n      dispatch(\n        notificationActions.showNotification({\n          status: \"error\",\n          message: \"Fetching accounts failed!\",\n        })\n      );\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};\n\nexport const addAccount = async function (accountName) {\n  const sendRequest = async function () {\n    const response = await fetch(\"/api/v1/accounts\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        account: accountName,\n      }),\n      headers: {\n        Authorization: `Bearer ${jwt}`,\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Something went wrong ...\");\n    }\n\n    console.log(response);\n    fetchAccountsData();\n  };\n\n  try {\n    sendAccount();\n  } catch (err) {\n    console.log(err.message);\n  }\n\n  reset();\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,eAAe,QAAQ,YAAY;AAC5C,SAASC,mBAAmB,QAAQ,gBAAgB;AAEpD,OAAO,MAAMC,iBAAiB,GAAG,MAAM;EACrC,OAAO,MAAOC,QAAQ,IAAK;IACzB,MAAMC,SAAS,GAAG,YAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;QAC/CC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC;UACxD,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;MAClC,OAAOD,IAAI;IACb,CAAC;IAED,IAAI;MACF,MAAME,YAAY,GAAG,MAAMV,SAAS,EAAE;MACtCD,QAAQ,CACNH,eAAe,CAACe,eAAe,CAAC;QAC9BC,QAAQ,EAAEF,YAAY,CAACG,MAAM;QAC7BC,KAAK,EAAEJ,YAAY,IAAI;MACzB,CAAC,CAAC,CACH;IACH,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdhB,QAAQ,CACNF,mBAAmB,CAACmB,gBAAgB,CAAC;QACnCC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;MACX,CAAC,CAAC,CACH;MACDC,UAAU,CAAC,MAAM;QACfpB,QAAQ,CAACF,mBAAmB,CAACuB,gBAAgB,EAAE,CAAC;MAClD,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,gBAAgBC,WAAW,EAAE;EACrD,MAAMC,WAAW,GAAG,kBAAkB;IACpC,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;MAC/CC,MAAM,EAAE,MAAM;MACdqB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,OAAO,EAAEL;MACX,CAAC,CAAC;MACFlB,OAAO,EAAE;QACPC,aAAa,EAAG,UAASuB,GAAI,EAAC;QAC9B,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAI,CAAC3B,QAAQ,CAAC4B,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IAEAC,OAAO,CAACC,GAAG,CAAC/B,QAAQ,CAAC;IACrBH,iBAAiB,EAAE;EACrB,CAAC;EAED,IAAI;IACFmC,WAAW,EAAE;EACf,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAChB,OAAO,CAAC;EAC1B;EAEAiB,KAAK,EAAE;AACT,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}