{"ast":null,"code":"var _jsxFileName = \"/Users/ivylou/Desktop/pythonProject/keysee/src/components/ResetPassword/ResetPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport classes from \"../Login/AuthForm.module.css\";\nimport useInput from \"../../hooks/use-input\";\nimport logoMain from \"../../images/LogoMain.png\";\nimport MainButton from \"../Reusable/MainButton\";\nimport PasswordInput from \"../Reusable/PasswordInput\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Notification from \"../Notification/Notification\";\nimport { callNotification } from \"../../store/notification-actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [passwordReset, setPasswordReset] = useState(false);\n  const notification = useSelector(state => state.notification.notification);\n  const showNotification = useSelector(state => state.notification.showNotification);\n  const {\n    value: enteredPassword,\n    hasError: passwordInputHasError,\n    isValid: enteredPasswordIsValid,\n    valueChangeHandler: passwordChangedHandler,\n    inputBlurHandler: passwordBlurHandler,\n    reset: resetPasswordInput\n  } = useInput(value => value.trim().length >= 6);\n  const {\n    value: enteredPasswordRepeat,\n    hasError: passwordInputHasErrorRepeat,\n    isValid: enteredPasswordIsValidRepeat,\n    valueChangeHandler: passwordChangedHandlerRepeat,\n    inputBlurHandler: passwordBlurHandlerRepeat,\n    reset: resetPasswordInputRepeat\n  } = useInput(value => value.trim().length >= 6);\n  let validationError = false;\n  if (passwordInputHasError || passwordInputHasErrorRepeat) {\n    validationError = true;\n  }\n  let formIsValid = false;\n  if (enteredPasswordIsValid && enteredPassword === enteredPasswordRepeat) {\n    formIsValid = true;\n  }\n  const submitHandler = event => {\n    event.preventDefault();\n    const sendRequest = async () => {\n      const response = await fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyBD3lPiWWjbfHBAvg0UlC2IOXOzKqlhSTY\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          //\n          // ЧТО НУЖНО ОТПРАВЛЯТЬ, ЧТОБЫ ИЗМЕНИЛСЯ ПАРОЛЬ У КОНКРЕТНОГО ЮЗЕРА?\n          //\n          password: enteredPassword,\n          returnSecureToken: true\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Something went wrong...\");\n      }\n      setPasswordReset(true);\n      setTimeout(() => {\n        history.replace(\"./login\");\n      }, 4000);\n    };\n    try {\n      sendRequest();\n    } catch (err) {\n      dispatch(callNotification(\"error\", err.message));\n    }\n  };\n  const goToLoginHandler = () => {\n    history.replace(\"/login\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      className: classes.loginForm,\n      children: [!passwordReset && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Reset password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputsContainer\",\n          children: [/*#__PURE__*/_jsxDEV(PasswordInput, {\n            enteredPassword: enteredPassword,\n            passwordInputHasError: passwordInputHasError,\n            enteredPasswordIsValid: enteredPasswordIsValid,\n            passwordChangedHandler: passwordChangedHandler,\n            passwordBlurHandler: passwordBlurHandler,\n            resetPasswordInput: resetPasswordInput,\n            placeholder: \"New password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(PasswordInput, {\n            enteredPassword: enteredPasswordRepeat,\n            passwordInputHasError: passwordInputHasErrorRepeat,\n            enteredPasswordIsValid: enteredPasswordIsValidRepeat,\n            passwordChangedHandler: passwordChangedHandlerRepeat,\n            passwordBlurHandler: passwordBlurHandlerRepeat,\n            resetPasswordInput: resetPasswordInputRepeat,\n            placeholder: \"Old password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), validationError && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: classes.errorText,\n          children: \"Password can't be less then 6 symbols.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(MainButton, {\n          title: \"Confirm\",\n          type: \"submit\",\n          disabled: !formIsValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), passwordReset && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: classes.sucessReg,\n        children: \"Your password has been reset successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: logoMain,\n      alt: \"keysee\",\n      className: classes.mainLogo,\n      onClick: goToLoginHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      show: showNotification,\n      status: notification.status,\n      message: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetPassword, \"IeeFihZq7oieEqQvmRut/ESo23U=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useInput, useInput];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","classes","useInput","logoMain","MainButton","PasswordInput","useHistory","useDispatch","useSelector","Notification","callNotification","ResetPassword","dispatch","history","passwordReset","setPasswordReset","notification","state","showNotification","value","enteredPassword","hasError","passwordInputHasError","isValid","enteredPasswordIsValid","valueChangeHandler","passwordChangedHandler","inputBlurHandler","passwordBlurHandler","reset","resetPasswordInput","trim","length","enteredPasswordRepeat","passwordInputHasErrorRepeat","enteredPasswordIsValidRepeat","passwordChangedHandlerRepeat","passwordBlurHandlerRepeat","resetPasswordInputRepeat","validationError","formIsValid","submitHandler","event","preventDefault","sendRequest","response","fetch","method","body","JSON","stringify","password","returnSecureToken","headers","ok","Error","setTimeout","replace","err","message","goToLoginHandler","container","loginForm","errorText","sucessReg","mainLogo","status"],"sources":["/Users/ivylou/Desktop/pythonProject/keysee/src/components/ResetPassword/ResetPassword.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport classes from \"../Login/AuthForm.module.css\";\nimport useInput from \"../../hooks/use-input\";\nimport logoMain from \"../../images/LogoMain.png\";\nimport MainButton from \"../Reusable/MainButton\";\nimport PasswordInput from \"../Reusable/PasswordInput\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Notification from \"../Notification/Notification\";\nimport { callNotification } from \"../../store/notification-actions\";\n\nconst ResetPassword = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [passwordReset, setPasswordReset] = useState(false);\n  const notification = useSelector((state) => state.notification.notification);\n  const showNotification = useSelector(\n    (state) => state.notification.showNotification\n  );\n\n  const {\n    value: enteredPassword,\n    hasError: passwordInputHasError,\n    isValid: enteredPasswordIsValid,\n    valueChangeHandler: passwordChangedHandler,\n    inputBlurHandler: passwordBlurHandler,\n    reset: resetPasswordInput,\n  } = useInput((value) => value.trim().length >= 6);\n\n  const {\n    value: enteredPasswordRepeat,\n    hasError: passwordInputHasErrorRepeat,\n    isValid: enteredPasswordIsValidRepeat,\n    valueChangeHandler: passwordChangedHandlerRepeat,\n    inputBlurHandler: passwordBlurHandlerRepeat,\n    reset: resetPasswordInputRepeat,\n  } = useInput((value) => value.trim().length >= 6);\n\n  let validationError = false;\n  if (passwordInputHasError || passwordInputHasErrorRepeat) {\n    validationError = true;\n  }\n\n  let formIsValid = false;\n  if (enteredPasswordIsValid && enteredPassword === enteredPasswordRepeat) {\n    formIsValid = true;\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const sendRequest = async () => {\n      const response = await fetch(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyBD3lPiWWjbfHBAvg0UlC2IOXOzKqlhSTY\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            //\n            // ЧТО НУЖНО ОТПРАВЛЯТЬ, ЧТОБЫ ИЗМЕНИЛСЯ ПАРОЛЬ У КОНКРЕТНОГО ЮЗЕРА?\n            //\n            password: enteredPassword,\n            returnSecureToken: true,\n          }),\n          headers: { \"Content-Type\": \"application/json\" },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong...\");\n      }\n\n      setPasswordReset(true);\n      setTimeout(() => {\n        history.replace(\"./login\");\n      }, 4000);\n    };\n\n    try {\n      sendRequest();\n    } catch (err) {\n      dispatch(callNotification(\"error\", err.message));\n    }\n  };\n\n  const goToLoginHandler = () => {\n    history.replace(\"/login\");\n  };\n\n  return (\n    <div className={classes.container}>\n      <form onSubmit={submitHandler} className={classes.loginForm}>\n        {!passwordReset && (\n          <>\n            <h1>Reset password</h1>\n            <div className=\"inputsContainer\">\n              <PasswordInput\n                enteredPassword={enteredPassword}\n                passwordInputHasError={passwordInputHasError}\n                enteredPasswordIsValid={enteredPasswordIsValid}\n                passwordChangedHandler={passwordChangedHandler}\n                passwordBlurHandler={passwordBlurHandler}\n                resetPasswordInput={resetPasswordInput}\n                placeholder=\"New password\"\n              />\n              <PasswordInput\n                enteredPassword={enteredPasswordRepeat}\n                passwordInputHasError={passwordInputHasErrorRepeat}\n                enteredPasswordIsValid={enteredPasswordIsValidRepeat}\n                passwordChangedHandler={passwordChangedHandlerRepeat}\n                passwordBlurHandler={passwordBlurHandlerRepeat}\n                resetPasswordInput={resetPasswordInputRepeat}\n                placeholder=\"Old password\"\n              />\n            </div>\n            {validationError && (\n              <span className={classes.errorText}>\n                Password can't be less then 6 symbols.\n              </span>\n            )}\n            <MainButton title=\"Confirm\" type=\"submit\" disabled={!formIsValid} />\n          </>\n        )}\n        {passwordReset && (\n          <span className={classes.sucessReg}>\n            Your password has been reset successfully!\n          </span>\n        )}\n      </form>\n      <img\n        src={logoMain}\n        alt=\"keysee\"\n        className={classes.mainLogo}\n        onClick={goToLoginHandler}\n      />\n\n      <Notification\n        show={showNotification}\n        status={notification.status}\n        message={notification.message}\n      />\n    </div>\n  );\n};\n\nexport default ResetPassword;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}