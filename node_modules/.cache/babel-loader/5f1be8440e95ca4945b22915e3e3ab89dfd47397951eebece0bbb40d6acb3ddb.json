{"ast":null,"code":"import { callNotification } from \"./notification-actions\";\nimport { tweetsActions } from \"./tweets\";\nexport const fetchTweetsData = () => {\n  return async dispatch => {\n    dispatch(tweetsActions.showLoading());\n    const sendRequest = async () => {\n      const response = await fetch(\"/api/v1/parsing\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch(tweetsActions.hideLoading());\n      const data = await response.json();\n      console.log(data);\n      if (!response.ok) {\n        throw new Error(\"Parcing failed... Please try again.\");\n      }\n\n      // console.log(data);\n      return data;\n    };\n    try {\n      const tweets = await sendRequest();\n      dispatch(tweetsActions.replaceTweets({\n        items: tweets || []\n      }));\n    } catch (err) {\n      // dispatch(callNotification(\"error\", err.message));\n      console.log(err.message);\n    }\n  };\n};\nexport const fetchLastResult = () => {\n  return async dispatch => {\n    dispatch(tweetsActions.showLoading());\n    const sendRequest = async () => {\n      const response = await fetch(\"/api/v1/last_results\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch(tweetsActions.hideLoading());\n      if (!response.ok) {\n        throw new Error(\"Something went wrong ...\");\n      }\n      const data = await response.json();\n      dispatch(callNotification(\"loaded\", \"Previous successful result loaded.\"));\n      return data;\n    };\n    try {\n      const tweets = await sendRequest();\n      dispatch(tweetsActions.replaceTweets({\n        items: tweets || []\n      }));\n    } catch (err) {\n      dispatch(callNotification(\"error\", err.message));\n    }\n  };\n};","map":{"version":3,"names":["callNotification","tweetsActions","fetchTweetsData","dispatch","showLoading","sendRequest","response","fetch","method","headers","Authorization","localStorage","getItem","hideLoading","data","json","console","log","ok","Error","tweets","replaceTweets","items","err","message","fetchLastResult"],"sources":["/Users/ivylou/Desktop/pythonProject/keysee/src/store/tweets-actions.js"],"sourcesContent":["import { callNotification } from \"./notification-actions\";\nimport { tweetsActions } from \"./tweets\";\n\nexport const fetchTweetsData = () => {\n  return async (dispatch) => {\n    dispatch(tweetsActions.showLoading());\n    const sendRequest = async () => {\n      const response = await fetch(\"/api/v1/parsing\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      dispatch(tweetsActions.hideLoading());\n\n      const data = await response.json();\n      console.log(data);\n\n      if (!response.ok) {\n        throw new Error(\"Parcing failed... Please try again.\");\n      }\n\n      // console.log(data);\n      return data;\n    };\n\n    try {\n      const tweets = await sendRequest();\n      dispatch(\n        tweetsActions.replaceTweets({\n          items: tweets || [],\n        })\n      );\n    } catch (err) {\n      // dispatch(callNotification(\"error\", err.message));\n      console.log(err.message);\n    }\n  };\n};\n\nexport const fetchLastResult = () => {\n  return async (dispatch) => {\n    dispatch(tweetsActions.showLoading());\n    const sendRequest = async () => {\n      const response = await fetch(\"/api/v1/last_results\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      dispatch(tweetsActions.hideLoading());\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong ...\");\n      }\n\n      const data = await response.json();\n      dispatch(\n        callNotification(\"loaded\", \"Previous successful result loaded.\")\n      );\n\n      return data;\n    };\n\n    try {\n      const tweets = await sendRequest();\n      dispatch(\n        tweetsActions.replaceTweets({\n          items: tweets || [],\n        })\n      );\n    } catch (err) {\n      dispatch(callNotification(\"error\", err.message));\n    }\n  };\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,aAAa,QAAQ,UAAU;AAExC,OAAO,MAAMC,eAAe,GAAG,MAAM;EACnC,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CAACF,aAAa,CAACG,WAAW,EAAE,CAAC;IACrC,MAAMC,WAAW,GAAG,YAAY;MAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,EAAE;QAC9CC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC;UACxD,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFT,QAAQ,CAACF,aAAa,CAACY,WAAW,EAAE,CAAC;MAErC,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,EAAE;MAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MAEjB,IAAI,CAACR,QAAQ,CAACY,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;MACxD;;MAEA;MACA,OAAOL,IAAI;IACb,CAAC;IAED,IAAI;MACF,MAAMM,MAAM,GAAG,MAAMf,WAAW,EAAE;MAClCF,QAAQ,CACNF,aAAa,CAACoB,aAAa,CAAC;QAC1BC,KAAK,EAAEF,MAAM,IAAI;MACnB,CAAC,CAAC,CACH;IACH,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZ;MACAP,OAAO,CAACC,GAAG,CAACM,GAAG,CAACC,OAAO,CAAC;IAC1B;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAM;EACnC,OAAO,MAAOtB,QAAQ,IAAK;IACzBA,QAAQ,CAACF,aAAa,CAACG,WAAW,EAAE,CAAC;IACrC,MAAMC,WAAW,GAAG,YAAY;MAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sBAAsB,EAAE;QACnDC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC;UACxD,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFT,QAAQ,CAACF,aAAa,CAACY,WAAW,EAAE,CAAC;MAErC,IAAI,CAACP,QAAQ,CAACY,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MAEA,MAAML,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,EAAE;MAClCZ,QAAQ,CACNH,gBAAgB,CAAC,QAAQ,EAAE,oCAAoC,CAAC,CACjE;MAED,OAAOc,IAAI;IACb,CAAC;IAED,IAAI;MACF,MAAMM,MAAM,GAAG,MAAMf,WAAW,EAAE;MAClCF,QAAQ,CACNF,aAAa,CAACoB,aAAa,CAAC;QAC1BC,KAAK,EAAEF,MAAM,IAAI;MACnB,CAAC,CAAC,CACH;IACH,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZpB,QAAQ,CAACH,gBAAgB,CAAC,OAAO,EAAEuB,GAAG,CAACC,OAAO,CAAC,CAAC;IAClD;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}