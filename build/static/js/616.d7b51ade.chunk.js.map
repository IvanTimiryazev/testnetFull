{"version":3,"file":"static/js/616.d7b51ade.chunk.js","mappings":"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","sources":["webpack://keysee/./src/components/Notification/Notification.module.css?a91f","components/Notification/Notification.js","components/ResetPassword/ResetPassword.js","pages/ResetPasswordPage.js","store/notification-actions.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"notification\":\"Notification_notification__SfISU\",\"error\":\"Notification_error__IBuVF\",\"success\":\"Notification_success__5+j+a\",\"loaded\":\"Notification_loaded__1vu5h\",\"ModalOpen\":\"Notification_ModalOpen__7dETP\",\"openModal\":\"Notification_openModal__oxfOq\",\"ModalClosed\":\"Notification_ModalClosed__ibOua\",\"closeModal\":\"Notification_closeModal__LSkpn\"};","import { CSSTransition } from \"react-transition-group\";\nimport classes from \"./Notification.module.css\";\n\nconst Notification = (props) => {\n  let specialClasses = \"\";\n\n  if (props.status === \"error\") {\n    specialClasses = classes.error;\n  }\n  if (props.status === \"success\") {\n    specialClasses = classes.success;\n  }\n  if (props.status === \"loaded\") {\n    specialClasses = classes.loaded;\n  }\n\n  const cssClasses = `${classes.notification} ${specialClasses}`;\n\n  return (\n    <>\n      <CSSTransition\n        in={props.show}\n        mountOnEnter\n        unmountOnExit\n        timeout={1000}\n        classNames={{\n          enter: \"\",\n          enterActive: classes.ModalOpen,\n          exit: \"\",\n          exitActive: classes.ModalClosed,\n        }}\n      >\n        <div className={cssClasses}>\n          {props.message ? <p>{props.message}</p> : \"\"}\n        </div>\n      </CSSTransition>\n    </>\n  );\n};\n\nexport default Notification;\n","import React, { useState } from \"react\";\n\nimport classes from \"../Login/AuthForm.module.css\";\nimport useInput from \"../../hooks/use-input\";\nimport logoMain from \"../../images/LogoMain.png\";\nimport MainButton from \"../Reusable/MainButton\";\nimport PasswordInput from \"../Reusable/PasswordInput\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Notification from \"../Notification/Notification\";\nimport { callNotification } from \"../../store/notification-actions\";\n\nconst ResetPassword = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [passwordReset, setPasswordReset] = useState(false);\n  const notification = useSelector((state) => state.notification.notification);\n  const showNotification = useSelector(\n    (state) => state.notification.showNotification\n  );\n\n  const {\n    value: enteredPassword,\n    hasError: passwordInputHasError,\n    isValid: enteredPasswordIsValid,\n    valueChangeHandler: passwordChangedHandler,\n    inputBlurHandler: passwordBlurHandler,\n    reset: resetPasswordInput,\n  } = useInput((value) => value.trim().length >= 6);\n\n  const {\n    value: enteredPasswordRepeat,\n    hasError: passwordInputHasErrorRepeat,\n    isValid: enteredPasswordIsValidRepeat,\n    valueChangeHandler: passwordChangedHandlerRepeat,\n    inputBlurHandler: passwordBlurHandlerRepeat,\n    reset: resetPasswordInputRepeat,\n  } = useInput((value) => value.trim().length >= 6);\n\n  let validationError = false;\n  if (passwordInputHasError || passwordInputHasErrorRepeat) {\n    validationError = true;\n  }\n\n  let formIsValid = false;\n  if (enteredPasswordIsValid && enteredPassword === enteredPasswordRepeat) {\n    formIsValid = true;\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const sendRequest = async () => {\n      const response = await fetch(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyBD3lPiWWjbfHBAvg0UlC2IOXOzKqlhSTY\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            //\n            // ЧТО НУЖНО ОТПРАВЛЯТЬ, ЧТОБЫ ИЗМЕНИЛСЯ ПАРОЛЬ У КОНКРЕТНОГО ЮЗЕРА?\n            //\n            password: enteredPassword,\n            returnSecureToken: true,\n          }),\n          headers: { \"Content-Type\": \"application/json\" },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong...\");\n      }\n\n      setPasswordReset(true);\n      setTimeout(() => {\n        history.replace(\"./login\");\n      }, 4000);\n    };\n\n    try {\n      sendRequest();\n    } catch (err) {\n      dispatch(callNotification(\"error\", err.message));\n    }\n  };\n\n  const goToLoginHandler = () => {\n    history.replace(\"/login\");\n  };\n\n  return (\n    <div className={classes.container}>\n      <form onSubmit={submitHandler} className={classes.loginForm}>\n        {!passwordReset && (\n          <>\n            <h1>Reset password</h1>\n            <div className=\"inputsContainer\">\n              <PasswordInput\n                enteredPassword={enteredPassword}\n                passwordInputHasError={passwordInputHasError}\n                enteredPasswordIsValid={enteredPasswordIsValid}\n                passwordChangedHandler={passwordChangedHandler}\n                passwordBlurHandler={passwordBlurHandler}\n                resetPasswordInput={resetPasswordInput}\n                placeholder=\"New password\"\n              />\n              <PasswordInput\n                enteredPassword={enteredPasswordRepeat}\n                passwordInputHasError={passwordInputHasErrorRepeat}\n                enteredPasswordIsValid={enteredPasswordIsValidRepeat}\n                passwordChangedHandler={passwordChangedHandlerRepeat}\n                passwordBlurHandler={passwordBlurHandlerRepeat}\n                resetPasswordInput={resetPasswordInputRepeat}\n                placeholder=\"Old password\"\n              />\n            </div>\n            {validationError && (\n              <span className={classes.errorText}>\n                Password can't be less then 6 symbols.\n              </span>\n            )}\n            <MainButton title=\"Confirm\" type=\"submit\" disabled={!formIsValid} />\n          </>\n        )}\n        {passwordReset && (\n          <span className={classes.sucessReg}>\n            Your password has been reset successfully!\n          </span>\n        )}\n      </form>\n      <img\n        src={logoMain}\n        alt=\"keysee\"\n        className={classes.mainLogo}\n        onClick={goToLoginHandler}\n      />\n\n      <Notification\n        show={showNotification}\n        status={notification.status}\n        message={notification.message}\n      />\n    </div>\n  );\n};\n\nexport default ResetPassword;\n","import React from \"react\";\nimport ResetPassword from \"../components/ResetPassword/ResetPassword\";\n\nconst ResetPasswordPage = () => {\n  return <ResetPassword />;\n};\n\nexport default ResetPasswordPage;\n","import { notificationActions } from \"./notification\";\n\nexport const callNotification = (status, message) => {\n  return (dispatch) => {\n    dispatch(\n      notificationActions.showNotification({\n        status: status,\n        message: message,\n      })\n    );\n    setTimeout(() => {\n      dispatch(notificationActions.hideNotification());\n    }, 2500);\n    setTimeout(() => {\n      dispatch(notificationActions.resetNotification());\n    }, 4000);\n  };\n};\n"],"names":["props","specialClasses","status","classes","cssClasses","CSSTransition","in","show","mountOnEnter","unmountOnExit","timeout","classNames","enter","enterActive","exit","exitActive","className","message","dispatch","useDispatch","history","useHistory","useState","passwordReset","setPasswordReset","notification","useSelector","state","showNotification","useInput","value","trim","length","enteredPassword","passwordInputHasError","hasError","enteredPasswordIsValid","isValid","passwordChangedHandler","valueChangeHandler","passwordBlurHandler","inputBlurHandler","resetPasswordInput","reset","enteredPasswordRepeat","passwordInputHasErrorRepeat","enteredPasswordIsValidRepeat","passwordChangedHandlerRepeat","passwordBlurHandlerRepeat","resetPasswordInputRepeat","validationError","formIsValid","onSubmit","event","preventDefault","sendRequest","fetch","method","body","JSON","stringify","password","returnSecureToken","headers","ok","Error","setTimeout","replace","err","callNotification","PasswordInput","placeholder","MainButton","title","type","disabled","src","logoMain","alt","onClick","Notification","notificationActions"],"sourceRoot":""}