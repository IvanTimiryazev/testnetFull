{"version":3,"file":"static/js/181.61c1aa80.chunk.js","mappings":"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","sources":["components/Login/RegisterForm.js","pages/RegisterPage.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport classes from \"./AuthForm.module.css\";\nimport logoMain from \"../../images/LogoMain.png\";\nimport useInput from \"../../hooks/use-input\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { authActions } from \"../../store/auth\";\nimport MainButton from \"../Reusable/MainButton\";\nimport PasswordInput from \"../Reusable/PasswordInput\";\n\nconst LoginForm = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const isError = useSelector((state) => state.auth.error);\n  const [regComplete, setRegComplete] = useState(false);\n\n  const {\n    value: enteredEmail,\n    hasError: emailInputHasError,\n    isValid: enteredEmailIsValid,\n    valueChangeHandler: emailChangedHandler,\n    inputBlurHandler: emailBlurHandler,\n    inputFocusHandler: emailFocusHandler,\n    reset: resetEmailInput,\n  } = useInput(\n    (value) =>\n      value.includes(\"@\") && value.includes(\".\") && value.trim().length >= 6\n  );\n\n  const {\n    value: enteredPassword,\n    hasError: passwordInputHasError,\n    isValid: enteredPasswordIsValid,\n    valueChangeHandler: passwordChangedHandler,\n    inputBlurHandler: passwordBlurHandler,\n    reset: resetPasswordInput,\n  } = useInput((value) => value.trim().length >= 6);\n\n  let formIsValid = false;\n  if (enteredEmailIsValid && enteredPasswordIsValid) {\n    formIsValid = true;\n  }\n\n  let validationError = false;\n  if (emailInputHasError || passwordInputHasError) {\n    validationError = true;\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const sendRequest = async () => {\n      const response = await fetch(\"/api/v1/register\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"This email already exists\");\n      }\n\n      const data = await response.json();\n      setRegComplete(true);\n      setTimeout(() => {\n        setRegComplete(false);\n        dispatch(authActions.logIn(data.access_token));\n      }, 2000);\n    };\n\n    try {\n      sendRequest();\n    } catch (err) {\n      dispatch(authActions.showError(err.message));\n    }\n\n    document.activeElement.blur();\n    resetEmailInput();\n    resetPasswordInput();\n  };\n\n  const signInHandler = () => {\n    history.replace(\"/login\");\n    dispatch(authActions.removeError());\n  };\n\n  const emailInputClasses =\n    emailInputHasError || isError ? `formInput wrongCredentials` : `formInput`;\n\n  return (\n    <div className={classes.container}>\n      <form onSubmit={submitHandler} className={classes.loginForm}>\n        {!regComplete && (\n          <>\n            <h1>Sign Up</h1>\n            <div className={classes.newUser}>\n              <p>Have an account?</p>\n              <span onClick={signInHandler}>Sign in.</span>\n            </div>\n            <div className=\"inputsContainer\">\n              <input\n                type=\"email\"\n                placeholder=\"Email\"\n                className={emailInputClasses}\n                value={enteredEmail}\n                onChange={emailChangedHandler}\n                onBlur={emailBlurHandler}\n                onFocus={emailFocusHandler}\n              ></input>\n              <PasswordInput\n                inputType=\"password\"\n                enteredPassword={enteredPassword}\n                passwordInputHasError={passwordInputHasError}\n                enteredPasswordIsValid={enteredPasswordIsValid}\n                passwordChangedHandler={passwordChangedHandler}\n                passwordBlurHandler={passwordBlurHandler}\n                resetPasswordInput={resetPasswordInput}\n                placeholder=\"Password\"\n              />\n            </div>\n            {validationError && (\n              <p className={classes.errorText}>\n                Please enter correct email & password.\n              </p>\n            )}\n            {isError && (\n              <p className={classes.errorText}>{isError.errorMessage}</p>\n            )}\n            <MainButton title=\"Sign Up\" type=\"submit\" disabled={!formIsValid} />\n          </>\n        )}\n        {regComplete && (\n          <span className={classes.sucessReg}>\n            Congratulations!\n            <br />\n            You have successfully registered!\n          </span>\n        )}\n      </form>\n      <img src={logoMain} alt=\"keysee\" className={classes.mainLogo} />\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React from \"react\";\nimport RegisterForm from \"../components/Login/RegisterForm\";\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n"],"names":["history","useHistory","dispatch","useDispatch","isError","useSelector","state","auth","error","useState","regComplete","setRegComplete","useInput","value","includes","trim","length","enteredEmail","emailInputHasError","hasError","enteredEmailIsValid","isValid","emailChangedHandler","valueChangeHandler","emailBlurHandler","inputBlurHandler","emailFocusHandler","inputFocusHandler","resetEmailInput","reset","enteredPassword","passwordInputHasError","enteredPasswordIsValid","passwordChangedHandler","passwordBlurHandler","resetPasswordInput","formIsValid","validationError","emailInputClasses","className","classes","onSubmit","event","preventDefault","sendRequest","fetch","method","body","JSON","stringify","email","password","headers","response","ok","Error","json","data","setTimeout","authActions","access_token","err","message","document","activeElement","blur","onClick","replace","type","placeholder","onChange","onBlur","onFocus","PasswordInput","inputType","errorMessage","MainButton","title","disabled","src","logoMain","alt","RegisterForm"],"sourceRoot":""}