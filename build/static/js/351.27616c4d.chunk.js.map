{"version":3,"file":"static/js/351.27616c4d.chunk.js","mappings":"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","sources":["components/Login/RegisterForm.tsx","pages/RegisterPage.tsx"],"sourcesContent":["import { FormEvent } from \"react\";\nimport classes from \"./AuthForm.module.scss\";\nimport logoMain from \"../../images/LogoMain.png\";\nimport useInput from \"../../hooks/use-input\";\nimport MainButton from \"../Reusable/MainButton\";\nimport PasswordInput from \"../Reusable/PasswordInput\";\nimport LoadingSpinner from \"../Reusable/LoadingSpinner\";\nimport { useHistory } from \"react-router-dom\";\nimport { authActions } from \"../../store/Authetication/authSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../hooks/ts-hooks\";\nimport { authFuction } from \"../../store/Authetication/authActions\";\nimport {\n  authIsLoadingSelector,\n  authIsErrorSelector,\n} from \"../../store/Authetication/authSelectors\";\n\nconst LoginForm = () => {\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n  const isError = useAppSelector(authIsErrorSelector);\n  const showSpinner = useAppSelector(authIsLoadingSelector);\n\n  const {\n    value: enteredEmail,\n    hasError: emailInputHasError,\n    isValid: enteredEmailIsValid,\n    valueChangeHandler: emailChangedHandler,\n    inputBlurHandler: emailBlurHandler,\n    inputFocusHandler: emailFocusHandler,\n    reset: resetEmailInput,\n  } = useInput(\n    (value: string) =>\n      value.includes(\"@\") && value.includes(\".\") && value.trim().length >= 6\n  );\n\n  const {\n    value: enteredPassword,\n    hasError: passwordInputHasError,\n    isValid: enteredPasswordIsValid,\n    valueChangeHandler: passwordChangedHandler,\n    inputBlurHandler: passwordBlurHandler,\n    reset: resetPasswordInput,\n  } = useInput((value: string) => value.trim().length >= 6);\n\n  let formIsValid = false;\n  if (enteredEmailIsValid && enteredPasswordIsValid) {\n    formIsValid = true;\n  }\n\n  let validationError = false;\n  if (emailInputHasError || passwordInputHasError) {\n    validationError = true;\n  }\n\n  const submitHandler = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const funcType = \"register\";\n\n    dispatch(authFuction({ funcType, enteredEmail, enteredPassword }));\n\n    if (document.activeElement instanceof HTMLElement) {\n      document.activeElement.blur();\n    }\n    resetEmailInput();\n    resetPasswordInput();\n  };\n\n  const signInHandler = () => {\n    history.replace(\"/login\");\n    dispatch(authActions.removeError());\n  };\n\n  const emailInputClasses =\n    emailInputHasError || isError ? `formInput wrongCredentials` : `formInput`;\n\n  return (\n    <>\n      {!showSpinner ? (\n        <div className={classes.container}>\n          <form onSubmit={submitHandler}>\n            <>\n              <h1>Sign Up</h1>\n              <div className={classes.newUser}>\n                <p>Have an account?</p>\n                <span onClick={signInHandler}>Sign in.</span>\n              </div>\n              <div className=\"inputsContainer\">\n                <input\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  className={emailInputClasses}\n                  value={enteredEmail}\n                  onChange={emailChangedHandler}\n                  onBlur={emailBlurHandler}\n                  onFocus={emailFocusHandler}\n                ></input>\n                <PasswordInput\n                  inputType=\"password\"\n                  enteredPassword={enteredPassword}\n                  passwordInputHasError={passwordInputHasError}\n                  enteredPasswordIsValid={enteredPasswordIsValid}\n                  passwordChangedHandler={passwordChangedHandler}\n                  passwordBlurHandler={passwordBlurHandler}\n                  resetPasswordInput={resetPasswordInput}\n                  placeholder=\"Password\"\n                />\n              </div>\n              {validationError && (\n                <p className={classes.errorText}>\n                  Please enter correct email & password.\n                </p>\n              )}\n              {isError && <p className={classes.errorText}>{isError}</p>}\n              <MainButton\n                title=\"Sign Up\"\n                type=\"submit\"\n                disabled={!formIsValid}\n              />\n            </>\n          </form>\n          <img src={logoMain} alt=\"keysee\" className={classes.mainLogo} />\n        </div>\n      ) : (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React from \"react\";\nimport RegisterForm from \"../components/Login/RegisterForm\";\n\nconst RegisterPage = () => {\n  return <RegisterForm />;\n};\n\nexport default RegisterPage;\n"],"names":["history","useHistory","dispatch","useAppDispatch","isError","useAppSelector","authIsErrorSelector","showSpinner","authIsLoadingSelector","_useInput","useInput","value","includes","trim","length","enteredEmail","emailInputHasError","hasError","enteredEmailIsValid","isValid","emailChangedHandler","valueChangeHandler","emailBlurHandler","inputBlurHandler","emailFocusHandler","inputFocusHandler","resetEmailInput","reset","_useInput2","enteredPassword","passwordInputHasError","enteredPasswordIsValid","passwordChangedHandler","passwordBlurHandler","resetPasswordInput","formIsValid","validationError","emailInputClasses","_jsx","_Fragment","children","className","LoadingSpinner","_jsxs","classes","onSubmit","event","preventDefault","authFuction","funcType","document","activeElement","HTMLElement","blur","onClick","replace","authActions","type","placeholder","onChange","onBlur","onFocus","PasswordInput","inputType","MainButton","title","disabled","src","logoMain","alt","RegisterForm"],"sourceRoot":""}