{"version":3,"file":"static/js/896.47fe6c89.chunk.js","mappings":"0QAkHA,EAxGkB,WAChB,IAAMA,GAAUC,EAAAA,EAAAA,MACVC,GAAWC,EAAAA,EAAAA,MACjB,GAAkCC,EAAAA,EAAAA,WAAS,GAAM,eAA1CC,EAAS,KAAEC,EAAY,KAE9B,GAQIC,EAAAA,EAAAA,IACF,SAACC,GAAK,OACJA,EAAMC,SAAS,MAAQD,EAAMC,SAAS,MAAQD,EAAME,OAAOC,QAAU,CAAC,IATjEC,EAAY,EAAnBJ,MACUK,EAAkB,EAA5BC,SACSC,EAAmB,EAA5BC,QACoBC,EAAmB,EAAvCC,mBACkBC,EAAgB,EAAlCC,iBACmBC,EAAiB,EAApCC,kBACOC,EAAe,EAAtBC,MAMIC,EAAcV,EAqCdW,EAAoBb,EAAkB,yCAQ5C,OACE,iBAAKc,UAAWC,EAAAA,EAAAA,UAAkB,WAChC,kBAAMC,SA7CY,SAACC,GACrBA,EAAMC,iBAEN,IAAMC,EAAW,yCAAG,mGACKC,MACrB,6GACA,CACEC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,YAAa,iBACbC,MAAO3B,MAGX,KAAD,EATa,UAWA4B,GAAG,CAAD,qBACR,IAAIC,MAAM,4BAA4B,KAAD,EAG7CC,SAASC,cAAcC,OACvBrB,IACAjB,GAAa,GACbuC,YAAW,WACTvC,GAAa,GACbN,EAAQ8C,QAAQ,SAClB,GAAG,KAAM,2CACV,kBAvBgB,mCAyBjB,IACEd,GAGF,CAFE,MAAOe,GACP7C,GAAS8C,EAAAA,EAAAA,GAAiB,QAASD,EAAIE,SACzC,CACF,EAYmCtB,UAAWC,EAAAA,EAAAA,UAAkB,WACxDvB,IACA,iCACE,4CACA,gBAAKsB,UAAU,kBAAiB,UAC9B,kBACEuB,KAAK,QACLC,YAAY,QACZxB,UAAWD,EACXlB,MAAOI,EACPwC,SAAUnC,EACVoC,OAAQlC,EACRmC,QAASjC,OAGb,SAACkC,EAAA,EAAU,CACTC,MAAM,aACNN,KAAK,SACLO,UAAWhC,OAIhBpB,IACC,kBAAMsB,UAAWC,EAAAA,EAAAA,UAAkB,mEACoB,kBAAM,gCAKjE,gBACE8B,IAAKC,EACLC,IAAI,SACJjC,UAAWC,EAAAA,EAAAA,SACXiC,QAvCmB,WACvB7D,EAAQ8C,QAAQ,SAClB,MAyCF,ECzGA,EAJsB,WACpB,OAAO,SAAC,EAAS,GACnB,C,qECHaE,EAAmB,SAACc,EAAQb,GACvC,OAAO,SAAC/C,GACNA,EACE6D,EAAAA,EAAAA,iBAAqC,CACnCD,OAAQA,EACRb,QAASA,KAGbJ,YAAW,WACT3C,EAAS6D,EAAAA,EAAAA,mBACX,GAAG,MACHlB,YAAW,WACT3C,EAAS6D,EAAAA,EAAAA,oBACX,GAAG,IACL,CACF,C","sources":["components/ResetPassword/EmailForm.js","pages/EmailFormPage.js","store/notification-actions.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport classes from \"../Login/AuthForm.module.css\";\nimport logoMain from \"../../images/LogoMain.png\";\nimport useInput from \"../../hooks/use-input\";\nimport MainButton from \"../Reusable/MainButton\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { callNotification } from \"../../store/notification-actions\";\n\nconst EmailForm = () => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [emailSent, setEmailSent] = useState(false);\n\n  const {\n    value: enteredEmail,\n    hasError: emailInputHasError,\n    isValid: enteredEmailIsValid,\n    valueChangeHandler: emailChangedHandler,\n    inputBlurHandler: emailBlurHandler,\n    inputFocusHandler: emailFocusHandler,\n    reset: resetEmailInput,\n  } = useInput(\n    (value) =>\n      value.includes(\"@\") && value.includes(\".\") && value.trim().length >= 6\n  );\n\n  const formIsValid = enteredEmailIsValid;\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    const sendRequest = async () => {\n      const response = await fetch(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key=AIzaSyBD3lPiWWjbfHBAvg0UlC2IOXOzKqlhSTY\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            requestType: \"PASSWORD_RESET\",\n            email: enteredEmail,\n          }),\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong ...\");\n      }\n\n      document.activeElement.blur();\n      resetEmailInput();\n      setEmailSent(true);\n      setTimeout(() => {\n        setEmailSent(false);\n        history.replace(\"/login\");\n      }, 5000);\n    };\n\n    try {\n      sendRequest();\n    } catch (err) {\n      dispatch(callNotification(\"error\", err.message));\n    }\n  };\n\n  const emailInputClasses = emailInputHasError\n    ? `formInput wrongCredentials`\n    : `formInput`;\n\n  const goToLoginHandler = () => {\n    history.replace(\"/login\");\n  };\n\n  return (\n    <div className={classes.container}>\n      <form onSubmit={submitHandler} className={classes.loginForm}>\n        {!emailSent && (\n          <>\n            <h1>Reset password</h1>\n            <div className=\"inputsContainer\">\n              <input\n                type=\"email\"\n                placeholder=\"Email\"\n                className={emailInputClasses}\n                value={enteredEmail}\n                onChange={emailChangedHandler}\n                onBlur={emailBlurHandler}\n                onFocus={emailFocusHandler}\n              />\n            </div>\n            <MainButton\n              title=\"Send email\"\n              type=\"submit\"\n              disabled={!formIsValid}\n            />\n          </>\n        )}\n        {emailSent && (\n          <span className={classes.sucessReg}>\n            The password reset link was just sent to your email. <br />\n            You can find it there!\n          </span>\n        )}\n      </form>\n      <img\n        src={logoMain}\n        alt=\"keysee\"\n        className={classes.mainLogo}\n        onClick={goToLoginHandler}\n      />\n    </div>\n  );\n};\n\nexport default EmailForm;\n","import React from \"react\";\nimport EmailForm from \"../components/ResetPassword/EmailForm\";\n\nconst EmailFormPage = () => {\n  return <EmailForm />;\n};\n\nexport default EmailFormPage;\n","import { notificationActions } from \"./notification\";\n\nexport const callNotification = (status, message) => {\n  return (dispatch) => {\n    dispatch(\n      notificationActions.showNotification({\n        status: status,\n        message: message,\n      })\n    );\n    setTimeout(() => {\n      dispatch(notificationActions.hideNotification());\n    }, 2500);\n    setTimeout(() => {\n      dispatch(notificationActions.resetNotification());\n    }, 4000);\n  };\n};\n"],"names":["history","useHistory","dispatch","useDispatch","useState","emailSent","setEmailSent","useInput","value","includes","trim","length","enteredEmail","emailInputHasError","hasError","enteredEmailIsValid","isValid","emailChangedHandler","valueChangeHandler","emailBlurHandler","inputBlurHandler","emailFocusHandler","inputFocusHandler","resetEmailInput","reset","formIsValid","emailInputClasses","className","classes","onSubmit","event","preventDefault","sendRequest","fetch","method","body","JSON","stringify","requestType","email","ok","Error","document","activeElement","blur","setTimeout","replace","err","callNotification","message","type","placeholder","onChange","onBlur","onFocus","MainButton","title","disabled","src","logoMain","alt","onClick","status","notificationActions"],"sourceRoot":""}