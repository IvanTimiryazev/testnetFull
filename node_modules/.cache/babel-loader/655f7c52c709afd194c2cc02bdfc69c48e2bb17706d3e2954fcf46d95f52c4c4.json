{"ast":null,"code":"import { useSelector } from \"react-redux\";\nimport { accountsActions } from \"./accounts\";\nimport { notificationActions } from \"./notification\";\n\n// export const sendAccountsData = (accountsList) => {\n//   return async (dispatch) => {\n//     const sendRequest = async () => {\n//       await fetch(\"/api/v1/accounts\", {\n//         method: \"POST\",\n//         body: JSON.stringify({\n//           // quantity: accountsList.quantity,\n//           items: accountsList.items,\n//         }),\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n//     };\n\n//     try {\n//       await sendRequest();\n//     } catch (error) {\n//       dispatch(\n//         notificationActions.showNotification({\n//           status: \"error\",\n//           message: \"Applying account failed!\",\n//         })\n//       );\n//       setTimeout(() => {\n//         dispatch(notificationActions.hideNotification());\n//       }, 1500);\n//     }\n//   };\n// };\n\nexport const fetchAccountsData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const accountsList = await fetchData();\n      dispatch(accountsActions.replaceAccounts({\n        quantity: accountsList.length,\n        items: accountsList || []\n      }));\n    } catch (error) {\n      dispatch(notificationActions.showNotification({\n        status: \"error\",\n        message: \"Fetching accounts failed!\"\n      }));\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};","map":{"version":3,"names":["useSelector","accountsActions","notificationActions","fetchAccountsData","dispatch","fetchData","response","fetch","method","headers","Authorization","localStorage","getItem","data","json","accountsList","replaceAccounts","quantity","length","items","error","showNotification","status","message","setTimeout","hideNotification"],"sources":["/Users/dmitrykoptev/Documents/GitHub/keysee/src/store/accounts-actions.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { accountsActions } from \"./accounts\";\nimport { notificationActions } from \"./notification\";\n\n// export const sendAccountsData = (accountsList) => {\n//   return async (dispatch) => {\n//     const sendRequest = async () => {\n//       await fetch(\"/api/v1/accounts\", {\n//         method: \"POST\",\n//         body: JSON.stringify({\n//           // quantity: accountsList.quantity,\n//           items: accountsList.items,\n//         }),\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n//           \"Content-Type\": \"application/json\",\n//         },\n//       });\n//     };\n\n//     try {\n//       await sendRequest();\n//     } catch (error) {\n//       dispatch(\n//         notificationActions.showNotification({\n//           status: \"error\",\n//           message: \"Applying account failed!\",\n//         })\n//       );\n//       setTimeout(() => {\n//         dispatch(notificationActions.hideNotification());\n//       }, 1500);\n//     }\n//   };\n// };\n\nexport const fetchAccountsData = () => {\n  return async (dispatch) => {\n    const fetchData = async () => {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const accountsList = await fetchData();\n      dispatch(\n        accountsActions.replaceAccounts({\n          quantity: accountsList.length,\n          items: accountsList || [],\n        })\n      );\n    } catch (error) {\n      dispatch(\n        notificationActions.showNotification({\n          status: \"error\",\n          message: \"Fetching accounts failed!\",\n        })\n      );\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,eAAe,QAAQ,YAAY;AAC5C,SAASC,mBAAmB,QAAQ,gBAAgB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;EACrC,OAAO,MAAOC,QAAQ,IAAK;IACzB,MAAMC,SAAS,GAAG,YAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;QAC/CC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC;UACxD,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;MAClC,OAAOD,IAAI;IACb,CAAC;IAED,IAAI;MACF,MAAME,YAAY,GAAG,MAAMV,SAAS,EAAE;MACtCD,QAAQ,CACNH,eAAe,CAACe,eAAe,CAAC;QAC9BC,QAAQ,EAAEF,YAAY,CAACG,MAAM;QAC7BC,KAAK,EAAEJ,YAAY,IAAI;MACzB,CAAC,CAAC,CACH;IACH,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdhB,QAAQ,CACNF,mBAAmB,CAACmB,gBAAgB,CAAC;QACnCC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;MACX,CAAC,CAAC,CACH;MACDC,UAAU,CAAC,MAAM;QACfpB,QAAQ,CAACF,mBAAmB,CAACuB,gBAAgB,EAAE,CAAC;MAClD,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}