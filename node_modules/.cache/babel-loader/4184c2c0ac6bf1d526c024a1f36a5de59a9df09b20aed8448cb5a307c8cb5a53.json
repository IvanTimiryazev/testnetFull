{"ast":null,"code":"import { accountsActions } from \"./accounts\";\nimport { callNotification } from \"./notification-actions\";\nimport { spinnerActions } from \"./spinner\";\nexport const fetchAccountsData = () => {\n  return async dispatch => {\n    dispatch(spinnerActions.showSpinner());\n    const fetchData = async () => {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch(spinnerActions.hideSpinner());\n      if (!response.ok) {\n        throw new Error(\"Fetching accounts failed ...\");\n      }\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const accountsList = await fetchData();\n      dispatch(accountsActions.replaceAccounts({\n        items: accountsList || []\n      }));\n    } catch (err) {\n      dispatch(callNotification(\"error\", err.message));\n    }\n  };\n};\nexport const addAccount = accountName => {\n  return async dispatch => {\n    dispatch(spinnerActions.showSpinner());\n    const sendRequest = async function () {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          account: accountName\n        }),\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch(spinnerActions.hideSpinner());\n      if (!response.ok) {\n        throw new Error(\"Adding account failed ...\");\n      }\n      dispatch(fetchAccountsData());\n    };\n    try {\n      await sendRequest();\n    } catch (err) {\n      dispatch(callNotification(\"error\", err.message));\n    }\n  };\n};\nexport const deleteAccount = id => {\n  return async dispatch => {\n    dispatch(spinnerActions.showSpinner());\n    const sendRequest = async function () {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id\n        }),\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      dispatch(spinnerActions.hideSpinner());\n      if (!response.ok) {\n        throw new Error(\"Deleting account failed ...\");\n      }\n      dispatch(fetchAccountsData());\n    };\n    try {\n      await sendRequest();\n    } catch (err) {\n      dispatch(callNotification(\"error\", err.message));\n    }\n  };\n};","map":{"version":3,"names":["accountsActions","callNotification","spinnerActions","fetchAccountsData","dispatch","showSpinner","fetchData","response","fetch","method","headers","Authorization","localStorage","getItem","hideSpinner","ok","Error","data","json","accountsList","replaceAccounts","items","err","message","addAccount","accountName","sendRequest","body","JSON","stringify","account","deleteAccount","id"],"sources":["/Users/ivylou/Desktop/pythonProject/keysee/src/store/accounts-actions.js"],"sourcesContent":["import { accountsActions } from \"./accounts\";\nimport { callNotification } from \"./notification-actions\";\nimport { spinnerActions } from \"./spinner\";\n\nexport const fetchAccountsData = () => {\n  return async (dispatch) => {\n    dispatch(spinnerActions.showSpinner());\n    const fetchData = async () => {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      dispatch(spinnerActions.hideSpinner());\n\n      if (!response.ok) {\n        throw new Error(\"Fetching accounts failed ...\");\n      }\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const accountsList = await fetchData();\n      dispatch(\n        accountsActions.replaceAccounts({\n          items: accountsList || [],\n        })\n      );\n    } catch (err) {\n      dispatch(callNotification(\"error\", err.message));\n    }\n  };\n};\n\nexport const addAccount = (accountName) => {\n  return async (dispatch) => {\n    dispatch(spinnerActions.showSpinner());\n    const sendRequest = async function () {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          account: accountName,\n        }),\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      dispatch(spinnerActions.hideSpinner());\n\n      if (!response.ok) {\n        throw new Error(\"Adding account failed ...\");\n      }\n\n      dispatch(fetchAccountsData());\n    };\n\n    try {\n      await sendRequest();\n    } catch (err) {\n      dispatch(callNotification(\"error\", err.message));\n    }\n  };\n};\n\nexport const deleteAccount = (id) => {\n  return async (dispatch) => {\n    dispatch(spinnerActions.showSpinner());\n    const sendRequest = async function () {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"DELETE\",\n        body: JSON.stringify({\n          id: id,\n        }),\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      dispatch(spinnerActions.hideSpinner());\n\n      if (!response.ok) {\n        throw new Error(\"Deleting account failed ...\");\n      }\n\n      dispatch(fetchAccountsData());\n    };\n\n    try {\n      await sendRequest();\n    } catch (err) {\n      dispatch(callNotification(\"error\", err.message));\n    }\n  };\n};\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,YAAY;AAC5C,SAASC,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,cAAc,QAAQ,WAAW;AAE1C,OAAO,MAAMC,iBAAiB,GAAG,MAAM;EACrC,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CAACF,cAAc,CAACG,WAAW,EAAE,CAAC;IACtC,MAAMC,SAAS,GAAG,YAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;QAC/CC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC;UACxD,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFT,QAAQ,CAACF,cAAc,CAACY,WAAW,EAAE,CAAC;MAEtC,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,EAAE;MAClC,OAAOD,IAAI;IACb,CAAC;IAED,IAAI;MACF,MAAME,YAAY,GAAG,MAAMb,SAAS,EAAE;MACtCF,QAAQ,CACNJ,eAAe,CAACoB,eAAe,CAAC;QAC9BC,KAAK,EAAEF,YAAY,IAAI;MACzB,CAAC,CAAC,CACH;IACH,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZlB,QAAQ,CAACH,gBAAgB,CAAC,OAAO,EAAEqB,GAAG,CAACC,OAAO,CAAC,CAAC;IAClD;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIC,WAAW,IAAK;EACzC,OAAO,MAAOrB,QAAQ,IAAK;IACzBA,QAAQ,CAACF,cAAc,CAACG,WAAW,EAAE,CAAC;IACtC,MAAMqB,WAAW,GAAG,kBAAkB;MACpC,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;QAC/CC,MAAM,EAAE,MAAM;QACdkB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,OAAO,EAAEL;QACX,CAAC,CAAC;QACFf,OAAO,EAAE;UACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC;UACxD,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFT,QAAQ,CAACF,cAAc,CAACY,WAAW,EAAE,CAAC;MAEtC,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;MAEAZ,QAAQ,CAACD,iBAAiB,EAAE,CAAC;IAC/B,CAAC;IAED,IAAI;MACF,MAAMuB,WAAW,EAAE;IACrB,CAAC,CAAC,OAAOJ,GAAG,EAAE;MACZlB,QAAQ,CAACH,gBAAgB,CAAC,OAAO,EAAEqB,GAAG,CAACC,OAAO,CAAC,CAAC;IAClD;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMQ,aAAa,GAAIC,EAAE,IAAK;EACnC,OAAO,MAAO5B,QAAQ,IAAK;IACzBA,QAAQ,CAACF,cAAc,CAACG,WAAW,EAAE,CAAC;IACtC,MAAMqB,WAAW,GAAG,kBAAkB;MACpC,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;QAC/CC,MAAM,EAAE,QAAQ;QAChBkB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBG,EAAE,EAAEA;QACN,CAAC,CAAC;QACFtB,OAAO,EAAE;UACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC;UACxD,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFT,QAAQ,CAACF,cAAc,CAACY,WAAW,EAAE,CAAC;MAEtC,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEAZ,QAAQ,CAACD,iBAAiB,EAAE,CAAC;IAC/B,CAAC;IAED,IAAI;MACF,MAAMuB,WAAW,EAAE;IACrB,CAAC,CAAC,OAAOJ,GAAG,EAAE;MACZlB,QAAQ,CAACH,gBAAgB,CAAC,OAAO,EAAEqB,GAAG,CAACC,OAAO,CAAC,CAAC;IAClD;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}