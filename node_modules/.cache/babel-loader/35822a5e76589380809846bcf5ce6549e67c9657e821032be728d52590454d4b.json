{"ast":null,"code":"import { useSelector } from \"react-redux\";\nimport { accountsActions } from \"./accounts\";\nimport { notificationActions } from \"./notification\";\nconst accounts = useSelector(state => state.accountsList.items);\nexport const sendAccountsData = accountsList => {\n  return async dispatch => {\n    const sendRequest = async () => {\n      await fetch(\"/api/v1/accounts\", {\n        method: \"PUT\",\n        body: JSON.stringify({\n          quantity: accountsList.quantity,\n          items: accountsList.items\n        })\n      });\n    };\n    try {\n      await sendRequest();\n    } catch (error) {\n      dispatch(notificationActions.showNotification({\n        status: \"error\",\n        message: \"Applying account failed!\"\n      }));\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};\nexport const fetchAccountsData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      const data = await response.json();\n      console.log(data);\n      return data;\n    };\n    try {\n      const accountsList = await fetchData();\n      dispatch(accountsActions.replaceAccounts({\n        // quantity: accountsListData.quantity,\n        items: accountsList.items || []\n      }));\n      console.log(accounts);\n    } catch (error) {\n      dispatch(notificationActions.showNotification({\n        status: \"error\",\n        message: \"Fetching accounts failed!\"\n      }));\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};","map":{"version":3,"names":["useSelector","accountsActions","notificationActions","accounts","state","accountsList","items","sendAccountsData","dispatch","sendRequest","fetch","method","body","JSON","stringify","quantity","error","showNotification","status","message","setTimeout","hideNotification","fetchAccountsData","fetchData","response","headers","Authorization","localStorage","getItem","data","json","console","log","replaceAccounts"],"sources":["/Users/dmitrykoptev/Documents/GitHub/keysee/src/store/accounts-actions.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { accountsActions } from \"./accounts\";\nimport { notificationActions } from \"./notification\";\n\nconst accounts = useSelector((state) => state.accountsList.items);\n\nexport const sendAccountsData = (accountsList) => {\n  return async (dispatch) => {\n    const sendRequest = async () => {\n      await fetch(\"/api/v1/accounts\", {\n        method: \"PUT\",\n        body: JSON.stringify({\n          quantity: accountsList.quantity,\n          items: accountsList.items,\n        }),\n      });\n    };\n\n    try {\n      await sendRequest();\n    } catch (error) {\n      dispatch(\n        notificationActions.showNotification({\n          status: \"error\",\n          message: \"Applying account failed!\",\n        })\n      );\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};\n\nexport const fetchAccountsData = () => {\n  return async (dispatch) => {\n    const fetchData = async () => {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      });\n\n      const data = await response.json();\n\n      console.log(data);\n      return data;\n    };\n\n    try {\n      const accountsList = await fetchData();\n\n      dispatch(\n        accountsActions.replaceAccounts({\n          // quantity: accountsListData.quantity,\n          items: accountsList.items || [],\n        })\n      );\n      console.log(accounts);\n    } catch (error) {\n      dispatch(\n        notificationActions.showNotification({\n          status: \"error\",\n          message: \"Fetching accounts failed!\",\n        })\n      );\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,eAAe,QAAQ,YAAY;AAC5C,SAASC,mBAAmB,QAAQ,gBAAgB;AAEpD,MAAMC,QAAQ,GAAGH,WAAW,CAAEI,KAAK,IAAKA,KAAK,CAACC,YAAY,CAACC,KAAK,CAAC;AAEjE,OAAO,MAAMC,gBAAgB,GAAIF,YAAY,IAAK;EAChD,OAAO,MAAOG,QAAQ,IAAK;IACzB,MAAMC,WAAW,GAAG,YAAY;MAC9B,MAAMC,KAAK,CAAC,kBAAkB,EAAE;QAC9BC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,QAAQ,EAAEV,YAAY,CAACU,QAAQ;UAC/BT,KAAK,EAAED,YAAY,CAACC;QACtB,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;IAED,IAAI;MACF,MAAMG,WAAW,EAAE;IACrB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdR,QAAQ,CACNN,mBAAmB,CAACe,gBAAgB,CAAC;QACnCC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;MACX,CAAC,CAAC,CACH;MACDC,UAAU,CAAC,MAAM;QACfZ,QAAQ,CAACN,mBAAmB,CAACmB,gBAAgB,EAAE,CAAC;MAClD,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,MAAM;EACrC,OAAO,MAAOd,QAAQ,IAAK;IACzB,MAAMe,SAAS,GAAG,YAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAAC,kBAAkB,EAAE;QAC/CC,MAAM,EAAE,KAAK;QACbc,OAAO,EAAE;UACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE;QACzD;MACF,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;MAElCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjB,OAAOA,IAAI;IACb,CAAC;IAED,IAAI;MACF,MAAMxB,YAAY,GAAG,MAAMkB,SAAS,EAAE;MAEtCf,QAAQ,CACNP,eAAe,CAACgC,eAAe,CAAC;QAC9B;QACA3B,KAAK,EAAED,YAAY,CAACC,KAAK,IAAI;MAC/B,CAAC,CAAC,CACH;MACDyB,OAAO,CAACC,GAAG,CAAC7B,QAAQ,CAAC;IACvB,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdR,QAAQ,CACNN,mBAAmB,CAACe,gBAAgB,CAAC;QACnCC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;MACX,CAAC,CAAC,CACH;MACDC,UAAU,CAAC,MAAM;QACfZ,QAAQ,CAACN,mBAAmB,CAACmB,gBAAgB,EAAE,CAAC;MAClD,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}