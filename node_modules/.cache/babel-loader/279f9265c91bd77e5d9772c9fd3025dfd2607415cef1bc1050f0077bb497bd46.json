{"ast":null,"code":"import { keysAction } from \"./keys\";\nimport { notificationActions } from \"./notification\";\nexport const sendKeysData = keyList => {\n  return async dispatch => {\n    dispatch(notificationActions.showNotification({\n      status: \"pending\",\n      message: \"Sending key data\"\n    }));\n    const sendRequest = async () => {\n      await fetch(\"https://keysee-default-rtdb.firebaseio.com/keys.json\", {\n        method: \"PUT\",\n        body: JSON.stringify({\n          quantity: keyList.quantity,\n          items: keyList.items\n        })\n      });\n    };\n    try {\n      await sendRequest();\n      dispatch(notificationActions.showNotification({\n        status: \"success\",\n        title: \"Success!\",\n        message: \"Sent key data successfully!\"\n      }));\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    } catch (error) {\n      dispatch(notificationActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Sending cart data failed!\"\n      }));\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};\nexport const fetchKeysData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"https://keysee-default-rtdb.firebaseio.com/keys.json\");\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const keyListData = await fetchData();\n      dispatch(keysAction.replaceKeyList({\n        items: keyListData.items || [],\n        quantity: keyListData.quantity\n      }));\n    } catch (error) {\n      dispatch(notificationActions.showNotification({\n        status: \"error\",\n        title: \"Error!\",\n        message: \"Fetching keys failed!\"\n      }));\n    }\n  };\n};","map":{"version":3,"names":["keysAction","notificationActions","sendKeysData","keyList","dispatch","showNotification","status","message","sendRequest","fetch","method","body","JSON","stringify","quantity","items","title","setTimeout","hideNotification","error","fetchKeysData","fetchData","response","data","json","keyListData","replaceKeyList"],"sources":["/Users/dmitrykoptev/Documents/GitHub/keysee/src/store/keys-actions.js"],"sourcesContent":["import { keysAction } from \"./keys\";\nimport { notificationActions } from \"./notification\";\n\nexport const sendKeysData = (keyList) => {\n  return async (dispatch) => {\n    dispatch(\n      notificationActions.showNotification({\n        status: \"pending\",\n        message: \"Sending key data\",\n      })\n    );\n    const sendRequest = async () => {\n      await fetch(\"https://keysee-default-rtdb.firebaseio.com/keys.json\", {\n        method: \"PUT\",\n        body: JSON.stringify({\n          quantity: keyList.quantity,\n          items: keyList.items,\n        }),\n      });\n    };\n\n    try {\n      await sendRequest();\n      dispatch(\n        notificationActions.showNotification({\n          status: \"success\",\n          title: \"Success!\",\n          message: \"Sent key data successfully!\",\n        })\n      );\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    } catch (error) {\n      dispatch(\n        notificationActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Sending cart data failed!\",\n        })\n      );\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};\n\nexport const fetchKeysData = () => {\n  return async (dispatch) => {\n    const fetchData = async () => {\n      const response = await fetch(\n        \"https://keysee-default-rtdb.firebaseio.com/keys.json\"\n      );\n\n      const data = await response.json();\n\n      return data;\n    };\n\n    try {\n      const keyListData = await fetchData();\n\n      dispatch(\n        keysAction.replaceKeyList({\n          items: keyListData.items || [],\n          quantity: keyListData.quantity,\n        })\n      );\n    } catch (error) {\n      dispatch(\n        notificationActions.showNotification({\n          status: \"error\",\n          title: \"Error!\",\n          message: \"Fetching keys failed!\",\n        })\n      );\n    }\n  };\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,QAAQ;AACnC,SAASC,mBAAmB,QAAQ,gBAAgB;AAEpD,OAAO,MAAMC,YAAY,GAAIC,OAAO,IAAK;EACvC,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CACNH,mBAAmB,CAACI,gBAAgB,CAAC;MACnCC,MAAM,EAAE,SAAS;MACjBC,OAAO,EAAE;IACX,CAAC,CAAC,CACH;IACD,MAAMC,WAAW,GAAG,YAAY;MAC9B,MAAMC,KAAK,CAAC,sDAAsD,EAAE;QAClEC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,QAAQ,EAAEX,OAAO,CAACW,QAAQ;UAC1BC,KAAK,EAAEZ,OAAO,CAACY;QACjB,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;IAED,IAAI;MACF,MAAMP,WAAW,EAAE;MACnBJ,QAAQ,CACNH,mBAAmB,CAACI,gBAAgB,CAAC;QACnCC,MAAM,EAAE,SAAS;QACjBU,KAAK,EAAE,UAAU;QACjBT,OAAO,EAAE;MACX,CAAC,CAAC,CACH;MACDU,UAAU,CAAC,MAAM;QACfb,QAAQ,CAACH,mBAAmB,CAACiB,gBAAgB,EAAE,CAAC;MAClD,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdf,QAAQ,CACNH,mBAAmB,CAACI,gBAAgB,CAAC;QACnCC,MAAM,EAAE,OAAO;QACfU,KAAK,EAAE,QAAQ;QACfT,OAAO,EAAE;MACX,CAAC,CAAC,CACH;MACDU,UAAU,CAAC,MAAM;QACfb,QAAQ,CAACH,mBAAmB,CAACiB,gBAAgB,EAAE,CAAC;MAClD,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAM;EACjC,OAAO,MAAOhB,QAAQ,IAAK;IACzB,MAAMiB,SAAS,GAAG,YAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAC1B,sDAAsD,CACvD;MAED,MAAMc,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,EAAE;MAElC,OAAOD,IAAI;IACb,CAAC;IAED,IAAI;MACF,MAAME,WAAW,GAAG,MAAMJ,SAAS,EAAE;MAErCjB,QAAQ,CACNJ,UAAU,CAAC0B,cAAc,CAAC;QACxBX,KAAK,EAAEU,WAAW,CAACV,KAAK,IAAI,EAAE;QAC9BD,QAAQ,EAAEW,WAAW,CAACX;MACxB,CAAC,CAAC,CACH;IACH,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdf,QAAQ,CACNH,mBAAmB,CAACI,gBAAgB,CAAC;QACnCC,MAAM,EAAE,OAAO;QACfU,KAAK,EAAE,QAAQ;QACfT,OAAO,EAAE;MACX,CAAC,CAAC,CACH;IACH;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}