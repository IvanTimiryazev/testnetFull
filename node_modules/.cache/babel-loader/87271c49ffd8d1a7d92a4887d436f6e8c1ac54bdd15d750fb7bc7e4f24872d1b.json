{"ast":null,"code":"import { useSelector } from \"react-redux\";\nimport { accountsActions } from \"./accounts\";\nimport { notificationActions } from \"./notification\";\nexport const sendAccountsData = accountsList => {\n  return async dispatch => {\n    const sendRequest = async () => {\n      await fetch(\"/api/v1/accounts\", {\n        method: \"PUT\",\n        body: JSON.stringify({\n          // quantity: accountsList.quantity,\n          items: accountsList.items\n        })\n      });\n    };\n    try {\n      await sendRequest();\n    } catch (error) {\n      dispatch(notificationActions.showNotification({\n        status: \"error\",\n        message: \"Applying account failed!\"\n      }));\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};\nexport const fetchAccountsData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const accountsList = await fetchData();\n      console.log(accountsList, accountsList.length);\n      dispatch(accountsActions.replaceAccounts({\n        quantity: accountsList.length,\n        items: accountsList.items || []\n      }));\n    } catch (error) {\n      dispatch(notificationActions.showNotification({\n        status: \"error\",\n        message: \"Fetching accounts failed!\"\n      }));\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};","map":{"version":3,"names":["useSelector","accountsActions","notificationActions","sendAccountsData","accountsList","dispatch","sendRequest","fetch","method","body","JSON","stringify","items","error","showNotification","status","message","setTimeout","hideNotification","fetchAccountsData","fetchData","response","headers","Authorization","localStorage","getItem","data","json","console","log","length","replaceAccounts","quantity"],"sources":["/Users/dmitrykoptev/Documents/GitHub/keysee/src/store/accounts-actions.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { accountsActions } from \"./accounts\";\nimport { notificationActions } from \"./notification\";\n\nexport const sendAccountsData = (accountsList) => {\n  return async (dispatch) => {\n    const sendRequest = async () => {\n      await fetch(\"/api/v1/accounts\", {\n        method: \"PUT\",\n        body: JSON.stringify({\n          // quantity: accountsList.quantity,\n          items: accountsList.items,\n        }),\n      });\n    };\n\n    try {\n      await sendRequest();\n    } catch (error) {\n      dispatch(\n        notificationActions.showNotification({\n          status: \"error\",\n          message: \"Applying account failed!\",\n        })\n      );\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};\n\nexport const fetchAccountsData = () => {\n  return async (dispatch) => {\n    const fetchData = async () => {\n      const response = await fetch(\"/api/v1/accounts\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      const data = await response.json();\n      return data;\n    };\n\n    try {\n      const accountsList = await fetchData();\n      console.log(accountsList, accountsList.length);\n\n      dispatch(\n        accountsActions.replaceAccounts({\n          quantity: accountsList.length,\n          items: accountsList.items || [],\n        })\n      );\n    } catch (error) {\n      dispatch(\n        notificationActions.showNotification({\n          status: \"error\",\n          message: \"Fetching accounts failed!\",\n        })\n      );\n      setTimeout(() => {\n        dispatch(notificationActions.hideNotification());\n      }, 1500);\n    }\n  };\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,eAAe,QAAQ,YAAY;AAC5C,SAASC,mBAAmB,QAAQ,gBAAgB;AAEpD,OAAO,MAAMC,gBAAgB,GAAIC,YAAY,IAAK;EAChD,OAAO,MAAOC,QAAQ,IAAK;IACzB,MAAMC,WAAW,GAAG,YAAY;MAC9B,MAAMC,KAAK,CAAC,kBAAkB,EAAE;QAC9BC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnB;UACAC,KAAK,EAAER,YAAY,CAACQ;QACtB,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;IAED,IAAI;MACF,MAAMN,WAAW,EAAE;IACrB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdR,QAAQ,CACNH,mBAAmB,CAACY,gBAAgB,CAAC;QACnCC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;MACX,CAAC,CAAC,CACH;MACDC,UAAU,CAAC,MAAM;QACfZ,QAAQ,CAACH,mBAAmB,CAACgB,gBAAgB,EAAE,CAAC;MAClD,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,MAAM;EACrC,OAAO,MAAOd,QAAQ,IAAK;IACzB,MAAMe,SAAS,GAAG,YAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAAC,kBAAkB,EAAE;QAC/CC,MAAM,EAAE,KAAK;QACbc,OAAO,EAAE;UACPC,aAAa,EAAG,UAASC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAC;UACxD,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;MAClC,OAAOD,IAAI;IACb,CAAC;IAED,IAAI;MACF,MAAMtB,YAAY,GAAG,MAAMgB,SAAS,EAAE;MACtCQ,OAAO,CAACC,GAAG,CAACzB,YAAY,EAAEA,YAAY,CAAC0B,MAAM,CAAC;MAE9CzB,QAAQ,CACNJ,eAAe,CAAC8B,eAAe,CAAC;QAC9BC,QAAQ,EAAE5B,YAAY,CAAC0B,MAAM;QAC7BlB,KAAK,EAAER,YAAY,CAACQ,KAAK,IAAI;MAC/B,CAAC,CAAC,CACH;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdR,QAAQ,CACNH,mBAAmB,CAACY,gBAAgB,CAAC;QACnCC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;MACX,CAAC,CAAC,CACH;MACDC,UAAU,CAAC,MAAM;QACfZ,QAAQ,CAACH,mBAAmB,CAACgB,gBAAgB,EAAE,CAAC;MAClD,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}